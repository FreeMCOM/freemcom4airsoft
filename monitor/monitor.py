#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Fri Nov 28 19:26:55 2014
#

port_default = "COM3"					#デフォルトのシリアルポートを指定
lang = [""]						#言語の強制指定
#lang = ["ja"]						#日本語を指定する例

import sys
import os.path
import string
import wx							# begin wxGlade: dependencies
import gettext							# end wxGlade
from mcom import  *						#mcomのクラス定義ファイルをインポート



if sys.platform == "win32" :
    localedir = os.path.abspath(os.path.dirname(__file__))+'\\locale'
    _ = gettext.translation("messages", localedir, lang, fallback=True  ).ugettext

else :
    localedir = os.path.abspath(os.path.dirname(__file__))+'/locale'
    _ = gettext.translation("messages", localedir , fallback=True  ).ugettext


class MainWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainWindow.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, _(u"Connecting..."))
        self.label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "")
        self.label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "")
        self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, _(u"Reset"))
        self.button_2 = wx.Button(self.panel_1, wx.ID_ANY, _(u"Config"))
        self.button_3 = wx.Button(self.panel_1, wx.ID_ANY, _(u"Exit"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.reset_button, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.conf_button, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.exit_button, self.button_3)
        # end wxGlade

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.refresh)
        self.timer.Start(500)

    def __set_properties(self):
        # begin wxGlade: MainWindow.__set_properties
        self.SetTitle(_(u"MCOM Monitor"))
        self.label_1.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_2.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_3.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_1.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_2.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_3.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.panel_1.SetMinSize((330, 197))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainWindow.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(6, 1, 0, 0)
        grid_sizer_1.Add(self.label_1, 0, 0, 0)
        grid_sizer_1.Add(self.label_2, 0, 0, 0)
        grid_sizer_1.Add(self.label_3, 0, 0, 0)
        grid_sizer_1.Add(self.button_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_1.Add(self.button_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        grid_sizer_1.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.panel_1.SetSizer(grid_sizer_1)
        sizer_1.Add(self.panel_1, 1, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def conf_button(self, event):  # wxGlade: MainWindow.<event_handler>
        frame_2.Show(True)


    def reset_button(self, event):  # wxGlade: MainWindow.<event_handler>
        global mcom
        mcom.reset(port)
        time.sleep(1)
        self.label_1.SetLabel( _(u"Press %d sec. until MCOM engage.") % (mcom.disengage) )
        self.label_2.SetLabel("")
        self.label_3.SetLabel("")

    def exit_button(self, event):  # wxGlade: MainWindow.<event_handler>
        exit()


    def refresh(self, event):
        global mcom
        try :
            if mcom.getdata() == -1 :
                errormsg = _(u"Communication error occurred. Please do following checklist :\n\n")
                errormsg += _(u"- Designate correctly port ?\n")
                errormsg += _(u"- MCOM power are turned on? \n")
                errormsg += _(u"- Correctly connect between Arduino and XBee ?\n")
                errormsg += _(u"- SERIAL SELECT switch (on wireless proto shield) is choose MICRO ? \n\n")
                errormsg += _(u"Error occurred if when above are good, possibility PC cannot recive radio wave from MCOM. \n")
                errormsg += _(u"You have to remove interrupt object, move MCOM to more near from PC, and etc... \n")

                print errormsg
                self.timer.Stop()
                frame_2.Show(True)

                dialog_1 = wx.MessageDialog(None, errormsg  , _(u"Can not receive data from MCOM!!"), wx.OK | wx.ICON_ERROR)
                dialog_1.ShowModal()

            if mcom.mcom_mode == 0:
                self.label_1.SetLabel( _(u"Press %d sec. until MCOM engage.") % (mcom.disengage) )
                self.label_2.SetLabel("")
                if mcom.button_pushing == 1:
                    self.label_3.SetLabel(_(u"MCOM was Engaging..."))
                else :
                    self.label_3.SetLabel("")

            elif mcom.mcom_mode == 1:
                self.label_1.SetLabel( _(u"Press %d sec. until MCOM disengage.") % (mcom.disengage) )
                self.label_2.SetLabel( _(u"Until destruction %d sec. ") % (mcom.left) )
                if mcom.button_pushing == 1:
                    self.label_3.SetLabel( _(u"MCOM was Disengaging..."))
                else :
                    self.label_3.SetLabel("")

            elif mcom.mcom_mode == 2:
                self.label_1.SetLabel( _(u"Press %d sec. until MCOM disengage.") % (mcom.disengage) )
                self.label_2.SetLabel( _(u"Until destruction %d sec. ") % (mcom.left) )
                if mcom.button_pushing == 1:
                    self.label_3.SetLabel(_(u"MCOM was Disengaging..."))
                else :
                    self.label_3.SetLabel("")

            elif mcom.mcom_mode == 3:
                self.label_1.SetLabel(_(u"MCOM was Destroyed!!"))
                self.label_2.SetLabel("")
                self.label_3.SetLabel("")

        except :
            self.timer.Stop()


# end of class MainWindow

class MCOM_CONFIG(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MCOM_CONFIG.__init__
        kwds["style"] = wx.FRAME_FLOAT_ON_PARENT
        wx.Frame.__init__(self, *args, **kwds)

        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.label_4 = wx.StaticText(self.panel_2, wx.ID_ANY, _(u"Input port name correctly."))
        self.text_ctrl_1 = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.button_4 = wx.Button(self.panel_2, wx.ID_ANY, _(u"OK"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.OK_BUTTON , self.text_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.OK_BUTTON, self.button_4)
        # end wxGlade


    def __set_properties(self):
        # begin wxGlade: MCOM_CONFIG.__set_properties
        self.SetTitle(_(u"MCOM CONFIG"))
        self.label_4.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.text_ctrl_1.SetMinSize((200, 30))
        self.text_ctrl_1.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_4.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.panel_2.SetMinSize((320,84 ))
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: MCOM_CONFIG.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_4.Add(self.label_4, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.button_4, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.panel_2.SetSizer(sizer_4)
        sizer_3.Add(self.panel_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        self.Layout()
        # end wxGlade


    def OK_BUTTON(self, event):  # wxGlade: MCOM_CONFIG.<event_handler>
        global port
        global portname
        global mcom

        try :
            mcom.port.close()
        except  :
            pass
                    
        port = str(self.text_ctrl_1.GetValue())

        self.GetPort()
        frame_1.timer.Start(500) 
        self.Show(False)



    def GetPort(self):
        global port
        global portname
        global mcom


        ####シリアルポート番号の取得・ウインドウタイトルでの表示名設定・ポート有無判定
        if sys.platform == "win32" :
            ###数字のみ抽出
            port = str(port).upper()			#一旦全てstr型にした上で大文字に変換　(CoMとかComとかに対処するため)
            port = port.replace("COM", "")		#"COM"の文字列を削除
            port = int(port)	 			#int型に変換
            port -= 1					#番号を1引く
            portname = "COM" + str(port +1)		#文字列操作して表示用の名前にする

        else:
            portname = port

        try:								#当該ポートが存在するか否かチェック
            mcom = Mcom(port)						#Mcomのインスタンス生成
            print _(u"Use port %s . \n") % (portname)
            frame_1.SetTitle( _(u"MCOM Monitor - %s") % (portname) )
        except serial.serialutil.SerialException :
            print _(u"Not found %s . \n" ) % (portname)
            HowToUse()

# end of class MCOM_CONFIG


def HowToUse():					#ポートが見つからない時の処理サブルーチン

    errormsg = _(u"Normally, port name is like below. \n\n")
    errormsg += _(u"Windows - COMx \n")
    errormsg += _(u"Linux - /dev/ttyACMx \n\n")
    errormsg += _(u"default are %s .") % (port_default) 

    print _(u"Usage :")
    print _(u" %s  <port name> ")  % os.path.basename(__file__)
    print errormsg

    frame_1.timer.Stop()
    dialog_1 = wx.MessageDialog(None, errormsg  , _(u"Port not found!"), wx.OK | wx.ICON_ERROR)
    frame_2.Show()
    dialog_1.ShowModal()


if __name__ == "__main__":
#    print os.path.abspath(os.path.dirname(__file__))

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MainWindow(None, wx.ID_ANY, "")
    frame_2 = MCOM_CONFIG(frame_1, wx.ID_ANY, "")

    ####シリアルポートの指定
    if len(sys.argv) == 1 :
        port = port_default
    elif sys.argv[1] == "help" :
        HowToUse()
    elif sys.argv[1] == "--help" :
        HowToUse()
    elif sys.argv[1] == "-h" :
        HowToUse()
    elif sys.argv[1] == "/?" :
        HowToUse()

    else:
        port = sys.argv[1]

    app.SetTopWindow(frame_1)
    frame_1.Show()
    frame_2.GetPort()
    app.MainLoop()
