#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Thu Nov 13 23:16:46 2014
#

port_default = "COM3"					#デフォルトのシリアルポートを指定

import sys
import os.path
import string
import wx							# begin wxGlade: dependencies
import gettext							# end wxGlade
from mcom import  *					#mcomのクラス定義ファイルをインポート



class MCOM_CONFIG(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MCOM_CONFIG.__init__
        kwds["style"] = wx.FRAME_FLOAT_ON_PARENT
        wx.Frame.__init__(self, *args, **kwds)

        global port
        port = ""

        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.label_7 = wx.StaticText(self.panel_2, wx.ID_ANY, _(u"ポート名を正確に入力してください！"))
        self.text_ctrl_1 = wx.TextCtrl(self.panel_2, wx.ID_ANY, port, style=wx.TE_PROCESS_ENTER)
        self.button_3 = wx.Button(self.panel_2, wx.ID_ANY, _("OK"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.OK_BUTTON , self.text_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.OK_BUTTON, self.button_3)
        # end wxGlade


    def __set_properties(self):
        # begin wxGlade: MCOM_CONFIG.__set_properties
        self.SetTitle(_("MCOM CONFIG"))
        self.label_7.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.text_ctrl_1.SetMinSize((180, 30))
        self.text_ctrl_1.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_3.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: MCOM_CONFIG.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_4.Add(self.label_7, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4.Add(self.button_3, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.panel_2.SetSizer(sizer_4)
        sizer_3.Add(self.panel_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        self.Layout()
        # end wxGlade


    def OK_BUTTON(self, event):  # wxGlade: MCOM_CONFIG.<event_handler>
        global port
        global portname
        port = self.text_ctrl_1.GetValue()

        ####シリアルポート番号の取得・ウインドウタイトルでの表示名設定・ポート有無判定
        if sys.platform == "win32" :
            ###数字のみ抽出
            port = port.upper()						#一旦全て大文字に変換　(CoMとかComとかに対処するため)
            port = port.replace("COM", "")				#"COM"の文字列を削除
            port = int(port)	 						#int型に変換
            port -= 1								#番号を1引く
            portname = "COM" + str(port +1)				#文字列操作して表示用の名前にする
        else:
            portname = port

        try:										#当該ポートが存在するか否かチェック
            global mcom
            mcom = Mcom(port)						#Mcomのインスタンス生成
            print (u" %s を使用します") % (portname)
            frame_1.timer.Start(500) 
            frame_1.SetTitle(_("MCOM Monitor " + portname))
            self.Show(False)

        except serial.serialutil.SerialException :
            print (u"%s が見つかりません。\n" ) % (portname)
            HowToUse()


    def GetPort(self):
        global port
        global portname

        ####シリアルポートの指定
        if len(sys.argv) == 1 :
            port = port_default
        elif sys.argv[1] == "help" :
            HowToUse()
        elif sys.argv[1] == "--help" :
            HowToUse()
        elif sys.argv[1] == "-h" :
            HowToUse()
        elif sys.argv[1] == "/?" :
            HowToUse()

        else:
            port = sys.argv[1]

        ####シリアルポート番号の取得・ウインドウタイトルでの表示名設定・ポート有無判定
        if sys.platform == "win32" :
            ###数字のみ抽出
            port = port.upper()						#一旦全て大文字に変換　(CoMとかComとかに対処するため)
            port = port.replace("COM", "")				#"COM"の文字列を削除
            port = int(port)	 						#int型に変換
            port -= 1								#番号を1引く
            portname = "COM" + str(port +1)				#文字列操作して表示用の名前にする
        else:
            portname = port

        try:										#当該ポートが存在するか否かチェック
            global mcom
            mcom = Mcom(port)						#Mcomのインスタンス生成
            print (u" %s を使用します。\n") % (portname)
            frame_1.SetTitle(_("MCOM Monitor " + portname))
        except serial.serialutil.SerialException :
            print (u"%s が見つかりません。\n" ) % (portname)
            HowToUse()


class MainWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainWindow.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, _(u"接続待ち"))
        self.label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "")
        self.label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, _(""))
        self.label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, _(""))
        self.label_5 = wx.StaticText(self.panel_1, wx.ID_ANY, "")
        self.label_6 = wx.StaticText(self.panel_1, wx.ID_ANY, _(""))
        self.button_1 = wx.Button(self.panel_1, wx.ID_ANY, _("リセット"))
        self.button_4 = wx.Button(self.panel_1, wx.ID_ANY, _("設定"))
        self.button_2 = wx.Button(self.panel_1, wx.ID_ANY, _("終了"))
        
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.reset_button, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.conf_button, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.exit_button, self.button_2)
        # end wxGlade

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.refresh)
        self.timer.Start(500)

    def __set_properties(self):
        # begin wxGlade: MainWindow.__set_properties
        self.SetTitle(_("MCOM Monitor"))
        self.label_1.SetFont(wx.Font(24, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_2.SetFont(wx.Font(24, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_3.SetFont(wx.Font(24, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_4.SetFont(wx.Font(24, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_5.SetFont(wx.Font(24, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_6.SetFont(wx.Font(24, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_1.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_4.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_2.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: MainWindow.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(4, 3, 0, 0)
        grid_sizer_1.Add(self.label_1, 0, 0, 0)
        grid_sizer_1.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.label_3, 0, 0, 0)
        grid_sizer_1.Add(self.label_4, 0, 0, 0)
        grid_sizer_1.Add(self.label_5, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.label_6, 0, 0, 0)
        grid_sizer_1.Add(self.button_1, 0, 0, 0)
        grid_sizer_1.Add(self.button_4, 0, 0, 0)
        grid_sizer_1.Add(self.button_2, 0, 0, 0)
        self.panel_1.SetSizer(grid_sizer_1)
        sizer_1.Add(self.panel_1, 1, 0, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade


    def conf_button(self, event):  # wxGlade: MainWindow.<event_handler>
        frame_2.Show(True)


    def reset_button(self, event):  # wxGlade: MainWindow.<event_handler>
        global mcom
        mcom.reset(port)
        time.sleep(1)
        self.label_1.SetLabel(u"起動まで")
        self.label_2.SetLabel(mcom.disengage)
        self.label_3.SetLabel(u"秒長押し")
        self.label_4.SetLabel(u"")
        self.label_5.SetLabel(u"")
        self.label_6.SetLabel(u"")


    def exit_button(self, event):  # wxGlade: MainWindow.<event_handler>
        exit()


    def refresh(self, event):
        global mcom
        if mcom.getdata() == -1 :
            errormsg = (u"通信エラーが発生しました。以下の項目を点検してください。\n\n")
            errormsg += (u"・正しいポートを指定していますか？\n")
            errormsg += (u"・MCOMの電源は入っていますか？\n")
            errormsg += (u"・ArduinoとXBeeは正しく接続されていますか？\n")
            errormsg += (u"・ワイヤレスプロトシールドのSERIAL SELECTスイッチはMICRO側になっていますか？\n\n")
            errormsg += (u"これらが全て正常でもこのエラーが発生する場合、MCOMからの電波がPCまで届いていない可能性があります。\n")
            errormsg += (u"MCOMをPCに近づける、遮蔽物を取り除く等が必要かもしれません。\n")

            print errormsg
            self.timer.Stop()
            frame_2.Show(True)

            dialog_1 = wx.MessageDialog(None, errormsg  , u"Can not receive data from MCOM!!", wx.OK | wx.ICON_ERROR)
            dialog_1.ShowModal()

        if mcom.mcom_mode == 0:
            self.label_1.SetLabel(u"起動まで")
            self.label_2.SetLabel(mcom.disengage)
            self.label_3.SetLabel(u"秒長押し")
            self.label_4.SetLabel(u"")
            self.label_5.SetLabel(u"")
            self.label_6.SetLabel(u"")

        elif mcom.mcom_mode == 1:
            self.label_1.SetLabel(u"解除まで")
            self.label_2.SetLabel(mcom.disengage)
            self.label_3.SetLabel(u"秒長押し")
            self.label_4.SetLabel(u"破壊まで")
            self.label_5.SetLabel(mcom.left)
            self.label_6.SetLabel(u"秒")

        elif mcom.mcom_mode == 2:
            self.label_1.SetLabel(u"解除まで")
            self.label_2.SetLabel(mcom.disengage)
            self.label_3.SetLabel(u"秒長押し")
            self.label_4.SetLabel(u"破壊まで")
            self.label_5.SetLabel(mcom.left)
            self.label_6.SetLabel(u"秒")

	elif mcom.mcom_mode == 3:
            self.label_1.SetLabel(u"破壊済み")
            self.label_2.SetLabel("")
            self.label_3.SetLabel("")
            self.label_4.SetLabel("")
            self.label_5.SetLabel("")
            self.label_6.SetLabel("")



def HowToUse():					#ポートが見つからない時の処理サブルーチン

    errormsg = (u"通常、ポート名は以下のようになります。\n\n")
    errormsg += (u"Windowsの場合 - COMx \n")
    errormsg += (u"Linuxの場合 - /dev/ttyACMx \n\n")
    errormsg += (u"デフォルトでは %s が使用されます。") % (port_default) 

    print (u"使用法 :")
    print (u" %s  <ポート名> ")  % (sys.argv[0])
    print errormsg

    frame_1.timer.Stop()
    dialog_1 = wx.MessageDialog(None, errormsg  , u"Port not found!", wx.OK | wx.ICON_ERROR)
    frame_2.Show()
    dialog_1.ShowModal()


if __name__ == "__main__":

    gettext.install("app") # replace with the appropriate catalog name
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MainWindow(None, wx.ID_ANY, "")
    frame_2 = MCOM_CONFIG(frame_1, wx.ID_ANY, "")
    frame_2.GetPort()
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
